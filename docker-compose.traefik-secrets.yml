# EcoleHub - Configuration Traefik avec gestion sécurisée des secrets
# Cette configuration gère les secrets de manière sécurisée pour Traefik

services:
  # Traefik avec dashboard sécurisé
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entrypoints.metrics.address=:8082"
      # Certificats automatiques Let's Encrypt (production)
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@ecolehub.be"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Dashboard sécurisé avec auth
      - "--api.insecure=false"
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS  
      - "8080:8080"  # Dashboard (sera sécurisé avec auth)
      - "8082:8082"  # Metrics pour Prometheus
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - ./letsencrypt:/letsencrypt
      - ./secrets:/run/secrets:ro  # Montage secrets en lecture seule
    networks:
      - ecolehub
    labels:
      - "traefik.enable=true"
      # Dashboard avec authentification basique  
      - "traefik.http.routers.dashboard.rule=Host(`traefik.ecolehub.be`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      # Route test localhost (développement)
      - "traefik.http.routers.dashboard-dev.rule=Host(`localhost`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard-dev.entrypoints=traefik"
      - "traefik.http.routers.dashboard-dev.service=api@internal"
      - "traefik.http.routers.dashboard-dev.middlewares=dashboard-auth"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      # Middleware d'authentification (généré depuis secrets)
      - "traefik.http.middlewares.dashboard-auth.basicauth.usersfile=/run/secrets/traefik_users.txt"
      # CORS pour EcoleHub
      - "traefik.http.middlewares.cors-ecolehub.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors-ecolehub.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-ecolehub.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.cors-ecolehub.headers.accesscontrolallowcredentials=true"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ecolehub
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: ecolehub
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_stage4.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - db_password
    networks:
      - ecolehub
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecolehub"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: sh -c 'redis-server --appendonly yes --requirepass $$(cat /run/secrets/redis_password)'
    volumes:
      - redis_data:/data
    secrets:
      - redis_password
    networks:
      - ecolehub
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a $$(cat /run/secrets/redis_password) ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_access_key
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_secret_key
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    secrets:
      - minio_access_key
      - minio_secret_key
    networks:
      - ecolehub
    labels:
      - "traefik.enable=true"
      # Console MinIO
      - "traefik.http.routers.minio-console.rule=Host(`minio.ecolehub.be`)"
      - "traefik.http.routers.minio-console.entrypoints=websecure"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.routers.minio-console.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"
      # API MinIO
      - "traefik.http.routers.minio-api.rule=Host(`storage.ecolehub.be`)"
      - "traefik.http.routers.minio-api.entrypoints=websecure"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.routers.minio-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        STAGE: "4"
    environment:
      - DATABASE_URL=postgresql://ecolehub@postgres:5432/ecolehub
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - STAGE=4
    secrets:
      - secret_key
      - db_password
      - redis_password
      - minio_access_key
      - minio_secret_key
      - mollie_api_key
      - printful_api_key
    volumes:
      - ./backend/app:/app/app
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - ecolehub
    labels:
      - "traefik.enable=true"
      # API Backend
      - "traefik.http.routers.api.rule=Host(`api.ecolehub.be`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=backend"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.middlewares=cors-ecolehub"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        STAGE: "4"
    command: celery -A app.workers.celery_app worker -l info
    environment:
      - DATABASE_URL=postgresql://ecolehub@postgres:5432/ecolehub  
      - REDIS_URL=redis://redis:6379/0
      - STAGE=4
    secrets:
      - secret_key
      - db_password
      - redis_password
      - mollie_api_key
      - printful_api_key
    volumes:
      - ./backend/app:/app/app
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - ecolehub

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ecolehub
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.ecolehub.be`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=dashboard-auth"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DEFAULT_TIMEZONE=Europe/Brussels
      - GF_SERVER_DOMAIN=dashboard.ecolehub.be
      - GF_SERVER_ROOT_URL=https://dashboard.ecolehub.be
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ecolehub
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.ecolehub.be`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: nginx:alpine
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./traefik/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - ecolehub
    labels:
      - "traefik.enable=true"
      # Site principal
      - "traefik.http.routers.frontend.rule=Host(`ecolehub.be`) || Host(`www.ecolehub.be`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.middlewares=cors-ecolehub"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # Redirection www vers apex
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www\\.(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://$${1}"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

# Configuration des secrets Docker
secrets:
  secret_key:
    file: ./secrets/secret_key.txt
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  minio_access_key:
    file: ./secrets/minio_access_key.txt
  minio_secret_key:
    file: ./secrets/minio_secret_key.txt
  mollie_api_key:
    file: ./secrets/mollie_api_key.txt
  printful_api_key:
    file: ./secrets/printful_api_key.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  # Secret spécifique Traefik pour auth dashboard
  traefik_users:
    file: ./secrets/traefik_users.txt

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  ecolehub:
    driver: bridge