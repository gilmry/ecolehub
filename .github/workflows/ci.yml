name: 🧪 EcoleHub CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  STAGE: 4
  TESTING: 1
  DATABASE_URL: sqlite:///test.db
  REDIS_URL: redis://localhost:6379/15
  SECRET_KEY: test-secret-key-for-ci-only

jobs:
  frontend-i18n:
    name: 🌐 Frontend i18n Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Install ripgrep
        run: sudo apt-get update && sudo apt-get install -y ripgrep

      - name: 🔎 Run i18n lint (STRICT)
        run: ./scripts/ci-i18n.sh

  a11y-audit:
    name: ♿ Accessibility Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 📡 Serve frontend (background)
        run: |
          cd frontend
          nohup python -m http.server 8089 >/dev/null 2>&1 &
          echo $! > ../server.pid
          sleep 2

      - name: 🟢 Install Node (for npx pa11y)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: 📦 Install pa11y-ci globally
        run: npm i -g pa11y-ci@3.1.0

      - name: ♿ Run pa11y against local frontend (STRICT)
        env:
          BASE_URL: http://localhost:8089
          STRICT: '1'
        run: ./scripts/a11y-audit.sh

      - name: 🧾 Generate pa11y JSON report
        if: always()
        env:
          BASE_URL: http://localhost:8089
        run: |
          npm init -y >/dev/null 2>&1 || true
          npx --yes pa11y "$BASE_URL" --standard WCAG2AA --reporter json > pa11y-report.json || true

      - name: 📤 Upload pa11y report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pa11y-report
          path: pa11y-report.json

      - name: 🧹 Stop server
        if: always()
        run: |
          kill $(cat server.pid) || true

  a11y-playwright:
    name: 🎭 A11Y Playwright (Python)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Python deps (playwright + pytest)
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-html playwright
          python -m playwright install --with-deps

      - name: 📡 Serve frontend (background)
        run: |
          cd frontend
          nohup python -m http.server 8089 >/dev/null 2>&1 &
          echo $! > ../server.pid
          sleep 2

      - name: ♿ Run Playwright + axe-core test
        env:
          BASE_URL: http://localhost:8089
        run: |
          mkdir -p reports
          pytest tests/a11y/test_axe_playwright.py -m a11y --maxfail=1 --disable-warnings --html=reports/playwright-a11y.html --self-contained-html

      - name: 📤 Upload Playwright a11y report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-a11y-report
          path: reports/playwright-a11y.html

      - name: 🧹 Stop server
        if: always()
        run: |
          kill $(cat server.pid) || true

  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        # Install test requirements (check which file exists)
        if [ -f requirements.test.txt ]; then
          pip install -r requirements.test.txt
        elif [ -f requirements.stage4.txt ]; then
          pip install -r requirements.stage4.txt
        else
          pip install fastapi uvicorn sqlalchemy psycopg2-binary redis pytest
        fi

    - name: 🎨 Code formatting and quality
      run: |
        cd backend
        # Install formatting and linting tools
        pip install black isort autopep8 autoflake flake8 || true

        # Run centralized formatting script (non-blocking)
        ../scripts/format-python.sh || echo "Formatting completed with warnings"

        # Run linting (non-blocking for generics)
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting issues found"
        python -m flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || echo "Style issues found"

    - name: 🧪 Run unit tests
      run: ./scripts/ci-backend.sh

    # Coverage report will be created by the backend CI script
    - name: 📈 Upload coverage to Codecov
      
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: ecolehub-backend
        fail_ci_if_error: false

  test-configuration:
    name: 🔧 Configuration Tests
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ✅ Verify configuration structure
      run: |
        # Verify essential configuration files
        ls -la .env.example || echo "❌ Missing .env.example"
        ls -la docker-compose.traefik.yml || echo "❌ Missing docker-compose.traefik.yml"

        # Verify test directory structure if it exists
        if [ -d backend/tests/ ]; then
          ls -la backend/tests/
          ls -la backend/tests/unit/ || echo "No unit tests directory"
          ls -la backend/tests/integration/ || echo "No integration tests directory"
        else
          echo "ℹ️ No tests directory found"
        fi

        # Verify configuration files
        ls -la backend/pytest.ini || echo "No pytest config"
        ls -la backend/requirements*.txt || echo "No requirements files"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install security tools
      run: |
        pip install bandit safety

    - name: 🛡️ Run Bandit security scan
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll

    - name: 🔐 Check dependencies for vulnerabilities
      run: |
        cd backend
        # Check requirements file that exists
        REQ_FILE=""
        if [ -f requirements.test.txt ]; then
          REQ_FILE="requirements.test.txt"
        elif [ -f requirements.stage4.txt ]; then
          REQ_FILE="requirements.stage4.txt"
        fi

        if [ -n "$REQ_FILE" ]; then
          safety check -r "$REQ_FILE" --json --output safety-report.json || true
          safety check -r "$REQ_FILE" || echo "Security issues found"
        else
          echo "No requirements file found for security check"
        fi

  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔨 Build backend image
      run: |
        cd backend
        docker build -t ecolehub-backend:test --build-arg STAGE=4 .

    - name: 🔍 Test Docker image
      run: |
        # Test that the image runs
        docker run --rm -d --name test-backend \
          -e DATABASE_URL=sqlite:///test.db \
          -e STAGE=4 \
          -p 8000:8000 \
          ecolehub-backend:test
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint (if available)
        # curl -f http://localhost:8000/health || echo "Health check not available"
        
        # Clean up
        docker stop test-backend || true

  documentation:
    name: 📖 Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ✅ Check documentation files
      run: |
        # Verify key documentation exists
        ls -la README.md
        ls -la CONFIGURATION-GUIDE.md || echo "Configuration guide missing"
        ls -la README-TRAEFIK.md || echo "Traefik guide missing"
        ls -la CHANGELOG.md || echo "Changelog missing"

        # Check for placeholder content
        if grep -q "TODO\|FIXME\|XXX" README.md; then
          echo "⚠️ Found TODO items in README.md"
        fi

    - name: 🔍 Verify Makefile help
      run: |
        # Check if Makefile exists and has help command
        if [ -f Makefile ]; then
          make help | grep -E "(test|build|start|stop)" || echo "❌ Key Makefile commands missing from help"
        else
          echo "ℹ️ No Makefile found - using docker compose directly"
        fi

  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: [test-backend, test-configuration, security-scan, docker-build-test, documentation, frontend-i18n, a11y-audit, a11y-playwright]
    if: success()

    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 All EcoleHub CI checks passed successfully!"
        echo "✅ Backend tests: PASSED"
        echo "✅ Configuration tests: PASSED" 
        echo "✅ Security scan: PASSED"
        echo "✅ Docker build: PASSED"
        echo "✅ Documentation: PASSED"
        echo ""
        echo "🚀 Ready for deployment!"

  notify-failure:
    name: ❌ Notify Failure
    runs-on: ubuntu-latest
    needs: [test-backend, test-configuration, security-scan, docker-build-test, documentation, frontend-i18n, a11y-audit, a11y-playwright]
    if: failure()

    steps:
    - name: ❌ Failure notification
      run: |
        echo "❌ EcoleHub CI pipeline failed!"
        echo "Check the failed jobs above for details."
        echo ""
        echo "Common fixes:"
        echo "- Run 'make test' locally to check tests"
        echo "- Run 'flake8 backend/app/' to fix code style issues"
        echo "- Check requirements files dependencies"
        echo "- Verify Docker build works locally"
        echo "- Ensure .env.example and docker-compose.traefik.yml exist"
