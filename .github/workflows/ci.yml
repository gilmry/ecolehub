name: 🧪 EcoleHub CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  STAGE: 4
  TESTING: 1
  DATABASE_URL: sqlite:///test.db
  REDIS_URL: redis://localhost:6379/15
  SECRET_KEY: test-secret-key-for-ci-only

jobs:
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        # Install test requirements (check which file exists)
        if [ -f requirements.test.txt ]; then
          pip install -r requirements.test.txt
        elif [ -f requirements.stage4.txt ]; then
          pip install -r requirements.stage4.txt
        else
          pip install fastapi uvicorn sqlalchemy psycopg2-binary redis pytest
        fi

    - name: 🔍 Lint with flake8
      run: |
        cd backend
        # Install flake8 if not already installed
        pip install flake8 || true
        # Run linting (non-blocking for generics)
        python -m flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting issues found"
        python -m flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || echo "Style issues found"

    - name: 🧪 Run unit tests
      run: |
        cd backend
        pytest tests/unit/ -v --tb=short -m unit

    - name: 🔗 Run integration tests
      run: |
        cd backend
        pytest tests/integration/ -v --tb=short -m integration

    - name: 🔐 Run authentication tests
      run: |
        cd backend
        pytest tests/ -v --tb=short -m auth

    - name: 🌍 Run context tests
      run: |
        cd backend
        # Run context-specific tests if they exist
        pytest tests/unit/test_*context*.py -v --tb=short || echo "No context tests found"

    - name: 💱 Run SEL system tests
      run: |
        cd backend
        pytest tests/ -v --tb=short -m sel

    - name: 📊 Generate coverage report
      run: |
        cd backend
        pytest tests/ --cov=app --cov-report=xml --cov-report=term

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: ecolehub-backend
        fail_ci_if_error: false

  test-configuration:
    name: 🔧 Configuration Tests
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ✅ Verify configuration structure
      run: |
        # Verify essential configuration files
        ls -la .env.example || echo "❌ Missing .env.example"
        ls -la docker-compose.traefik.yml || echo "❌ Missing docker-compose.traefik.yml"

        # Verify test directory structure if it exists
        if [ -d backend/tests/ ]; then
          ls -la backend/tests/
          ls -la backend/tests/unit/ || echo "No unit tests directory"
          ls -la backend/tests/integration/ || echo "No integration tests directory"
        else
          echo "ℹ️ No tests directory found"
        fi

        # Verify configuration files
        ls -la backend/pytest.ini || echo "No pytest config"
        ls -la backend/requirements*.txt || echo "No requirements files"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install security tools
      run: |
        pip install bandit safety

    - name: 🛡️ Run Bandit security scan
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -ll

    - name: 🔐 Check dependencies for vulnerabilities
      run: |
        cd backend
        # Check requirements file that exists
        REQ_FILE=""
        if [ -f requirements.test.txt ]; then
          REQ_FILE="requirements.test.txt"
        elif [ -f requirements.stage4.txt ]; then
          REQ_FILE="requirements.stage4.txt"
        fi

        if [ -n "$REQ_FILE" ]; then
          safety check -r "$REQ_FILE" --json --output safety-report.json || true
          safety check -r "$REQ_FILE" || echo "Security issues found"
        else
          echo "No requirements file found for security check"
        fi

  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔨 Build backend image
      run: |
        cd backend
        docker build -t ecolehub-backend:test --build-arg STAGE=4 .

    - name: 🔍 Test Docker image
      run: |
        # Test that the image runs
        docker run --rm -d --name test-backend \
          -e DATABASE_URL=sqlite:///test.db \
          -e STAGE=4 \
          -p 8000:8000 \
          ecolehub-backend:test
        
        # Wait for container to be ready
        sleep 10
        
        # Test health endpoint (if available)
        # curl -f http://localhost:8000/health || echo "Health check not available"
        
        # Clean up
        docker stop test-backend || true

  documentation:
    name: 📖 Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ✅ Check documentation files
      run: |
        # Verify key documentation exists
        ls -la README.md
        ls -la CONFIGURATION-GUIDE.md || echo "Configuration guide missing"
        ls -la README-TRAEFIK.md || echo "Traefik guide missing"
        ls -la CHANGELOG.md || echo "Changelog missing"

        # Check for placeholder content
        if grep -q "TODO\|FIXME\|XXX" README.md; then
          echo "⚠️ Found TODO items in README.md"
        fi

    - name: 🔍 Verify Makefile help
      run: |
        # Check if Makefile exists and has help command
        if [ -f Makefile ]; then
          make help | grep -E "(test|build|start|stop)" || echo "❌ Key Makefile commands missing from help"
        else
          echo "ℹ️ No Makefile found - using docker compose directly"
        fi

  notify-success:
    name: 🎉 Notify Success
    runs-on: ubuntu-latest
    needs: [test-backend, test-configuration, security-scan, docker-build-test, documentation]
    if: success()

    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 All EcoleHub CI checks passed successfully!"
        echo "✅ Backend tests: PASSED"
        echo "✅ Configuration tests: PASSED" 
        echo "✅ Security scan: PASSED"
        echo "✅ Docker build: PASSED"
        echo "✅ Documentation: PASSED"
        echo ""
        echo "🚀 Ready for deployment!"

  notify-failure:
    name: ❌ Notify Failure
    runs-on: ubuntu-latest
    needs: [test-backend, test-configuration, security-scan, docker-build-test, documentation]
    if: failure()

    steps:
    - name: ❌ Failure notification
      run: |
        echo "❌ EcoleHub CI pipeline failed!"
        echo "Check the failed jobs above for details."
        echo ""
        echo "Common fixes:"
        echo "- Run 'make test' locally to check tests"
        echo "- Run 'flake8 backend/app/' to fix code style issues"
        echo "- Check requirements files dependencies"
        echo "- Verify Docker build works locally"
        echo "- Ensure .env.example and docker-compose.traefik.yml exist"