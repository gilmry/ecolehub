name: 🎭 E2E Tests & Video Documentation

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      generate_docs:
        description: 'Generate video documentation'
        required: false
        default: 'true'
        type: boolean

env:
  STAGE: 4
  TESTING: 1
  DATABASE_URL: sqlite:///test.db
  REDIS_URL: redis://localhost:6379/15
  SECRET_KEY: test-secret-key-for-ci-only
  BASE_URL: http://localhost:8000

jobs:
  e2e-tests:
    name: 🎭 Playwright E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start EcoleHub application
        run: |
          # Copy environment configuration
          cp .env.example .env

          # Start the application with docker compose
          docker compose -f docker-compose.traefik.yml up -d

          # Wait for application to be ready
          timeout 120 bash -c 'until curl -f http://localhost:8000/health 2>/dev/null; do sleep 2; done' || echo "Health check timeout, continuing anyway"

      - name: 🧪 Run E2E tests
        run: npx playwright test

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: 📹 Upload test videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-videos
          path: test-results/videos/
          retention-days: 7

      - name: 📸 Upload screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-screenshots
          path: test-results/screenshots/
          retention-days: 7

      - name: 📋 Show test results summary
        if: always()
        run: |
          echo "🎭 Playwright E2E Test Results"
          echo "=============================="

          if [ -f "test-results/results.json" ]; then
            echo "✅ Test results file found"
            # Basic test summary (you could enhance this with jq if available)
            echo "📊 Results saved in artifacts"
          else
            echo "⚠️ No test results file found"
          fi

          if [ -d "test-results/videos" ] && [ "$(ls -A test-results/videos)" ]; then
            echo "📹 Test videos recorded: $(ls test-results/videos | wc -l) files"
          else
            echo "📹 No test videos recorded"
          fi

          echo ""
          echo "📁 Artifacts uploaded:"
          echo "   - playwright-report: HTML test report"
          echo "   - playwright-videos: Test execution videos"
          echo "   - playwright-screenshots: Test screenshots"

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.traefik.yml down -v || true
          docker system prune -f || true

  video-documentation:
    name: 📹 Generate Video Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event.inputs.generate_docs == 'true' || github.ref == 'refs/heads/master'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start EcoleHub application
        run: |
          cp .env.example .env
          docker compose -f docker-compose.traefik.yml up -d
          timeout 120 bash -c 'until curl -f http://localhost:8000/health 2>/dev/null; do sleep 2; done' || echo "Health check timeout, continuing anyway"

      - name: 🎬 Generate documentation videos
        run: |
          # Create docs directory
          mkdir -p docs/videos

          # Run documentation tests with video recording
          npx playwright test --config=playwright-video-docs.config.ts e2e/documentation-flow.spec.ts

      - name: 📹 Upload documentation videos
        uses: actions/upload-artifact@v4
        with:
          name: ecolehub-video-documentation
          path: |
            test-results/videos/
            docs/videos/
          retention-days: 30

      - name: 📊 Upload documentation report
        uses: actions/upload-artifact@v4
        with:
          name: video-documentation-report
          path: playwright-report/
          retention-days: 30

      - name: 📋 Documentation summary
        run: |
          echo "📹 EcoleHub Video Documentation Generated"
          echo "========================================"

          if [ -d "test-results/videos" ] && [ "$(ls -A test-results/videos)" ]; then
            echo "✅ Documentation videos created: $(ls test-results/videos | wc -l) files"
            echo ""
            echo "📹 Video files:"
            ls -la test-results/videos/ | grep '\.webm' || echo "No .webm files found"
          else
            echo "❌ No documentation videos were created"
          fi

          echo ""
          echo "📁 Artifacts created:"
          echo "   - ecolehub-video-documentation: Video files for documentation"
          echo "   - video-documentation-report: HTML report for documentation tests"

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.traefik.yml down -v || true
          docker system prune -f || true

  mobile-tests:
    name: 📱 Mobile E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🚀 Start EcoleHub application
        run: |
          cp .env.example .env
          docker compose -f docker-compose.traefik.yml up -d
          timeout 120 bash -c 'until curl -f http://localhost:8000/health 2>/dev/null; do sleep 2; done' || echo "Health check timeout, continuing anyway"

      - name: 📱 Run mobile tests
        run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"

      - name: 📊 Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker compose -f docker-compose.traefik.yml down -v || true