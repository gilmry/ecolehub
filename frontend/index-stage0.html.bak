<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EcoleHub - √âcole Notre-Dame Immacul√©e</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        [v-cloak] { display: none; }
    </style>
</head>
<body class="bg-gray-50">
    <div id="app" v-cloak class="min-h-screen">
        <!-- Header -->
        <header class="bg-white shadow">
            <div class="max-w-4xl mx-auto px-4 py-6">
                <h1 class="text-3xl font-bold text-gray-900">
                    üè´ EcoleHub - √âcole Notre-Dame Immacul√©e
                </h1>
                <p class="text-gray-600 mt-2">Plateforme d'entraide entre parents - Evere</p>
                <div v-if="isAuthenticated" class="mt-2 text-sm text-green-600">
                    Connect√© en tant que {{ user.first_name }} {{ user.last_name }}
                </div>
            </div>
        </header>

        <main class="max-w-4xl mx-auto px-4 py-8">
            <!-- Message d'erreur -->
            <div v-if="errorMessage" class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                {{ errorMessage }}
                <button @click="errorMessage = ''" class="float-right text-red-700 hover:text-red-900">√ó</button>
            </div>

            <!-- Message de succ√®s -->
            <div v-if="successMessage" class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                {{ successMessage }}
                <button @click="successMessage = ''" class="float-right text-green-700 hover:text-green-900">√ó</button>
            </div>

            <!-- Formulaire Login/Register -->
            <div v-if="!isAuthenticated" class="max-w-md mx-auto">
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <h2 class="text-2xl font-bold mb-6 text-center">
                        {{ isLogin ? 'Connexion' : 'Inscription' }}
                    </h2>
                    
                    <form @submit.prevent="isLogin ? login() : register()">
                        <div class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                            <input
                                v-model="formData.email"
                                type="email"
                                class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                                placeholder="votre.email@example.com"
                            >
                        </div>
                        
                        <div v-if="!isLogin" class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2">Pr√©nom</label>
                            <input
                                v-model="formData.first_name"
                                type="text"
                                class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                                placeholder="Pr√©nom"
                            >
                        </div>
                        
                        <div v-if="!isLogin" class="mb-4">
                            <label class="block text-gray-700 text-sm font-bold mb-2">Nom</label>
                            <input
                                v-model="formData.last_name"
                                type="text"
                                class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                                placeholder="Nom de famille"
                            >
                        </div>
                        
                        <div class="mb-6">
                            <label class="block text-gray-700 text-sm font-bold mb-2">Mot de passe</label>
                            <input
                                v-model="formData.password"
                                type="password"
                                class="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                                minlength="6"
                            >
                        </div>
                        
                        <button
                            type="submit"
                            :disabled="isLoading"
                            class="w-full bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition duration-200 disabled:opacity-50"
                        >
                            <span v-if="isLoading">‚è≥ Chargement...</span>
                            <span v-else>{{ isLogin ? 'Se connecter' : "S'inscrire" }}</span>
                        </button>
                    </form>
                    
                    <p class="mt-6 text-center text-gray-600">
                        <a
                            href="#"
                            @click.prevent="toggleForm"
                            class="text-blue-500 hover:underline"
                        >
                            {{ isLogin ? "Pas encore de compte ? S'inscrire" : "D√©j√† inscrit ? Se connecter" }}
                        </a>
                    </p>
                </div>
            </div>

            <!-- Dashboard Utilisateur Connect√© -->
            <div v-else>
                <!-- Profil Utilisateur -->
                <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 class="text-2xl font-bold mb-4">üë§ Mon Profil</h2>
                    
                    <div v-if="!editingProfile" class="space-y-2">
                        <p><strong>Email:</strong> {{ user.email }}</p>
                        <p><strong>Pr√©nom:</strong> {{ user.first_name }}</p>
                        <p><strong>Nom:</strong> {{ user.last_name }}</p>
                        <button 
                            @click="editingProfile = true"
                            class="mt-4 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
                        >
                            Modifier
                        </button>
                    </div>

                    <form v-else @submit.prevent="updateProfile()" class="space-y-4">
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">Pr√©nom</label>
                            <input
                                v-model="profileEdit.first_name"
                                type="text"
                                class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                            >
                        </div>
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">Nom</label>
                            <input
                                v-model="profileEdit.last_name"
                                type="text"
                                class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                                required
                            >
                        </div>
                        <div class="flex space-x-2">
                            <button
                                type="submit"
                                :disabled="isLoading"
                                class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50"
                            >
                                Sauvegarder
                            </button>
                            <button
                                type="button"
                                @click="cancelEdit()"
                                class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
                            >
                                Annuler
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Gestion des Enfants -->
                <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
                    <h2 class="text-2xl font-bold mb-4">üë∂ Mes Enfants</h2>
                    
                    <!-- Liste des enfants -->
                    <div v-if="children.length > 0" class="space-y-3 mb-6">
                        <div
                            v-for="child in children"
                            :key="child.id"
                            class="flex items-center justify-between bg-gray-50 p-3 rounded-lg"
                        >
                            <div>
                                <span class="font-semibold">{{ child.first_name }}</span>
                                <span class="ml-2 px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm">{{ child.class_name }}</span>
                            </div>
                            <button
                                @click="deleteChild(child.id)"
                                class="text-red-500 hover:text-red-700"
                                :disabled="isLoading"
                            >
                                üóëÔ∏è
                            </button>
                        </div>
                    </div>
                    <p v-else class="text-gray-500 mb-6">Aucun enfant enregistr√©</p>
                    
                    <!-- Formulaire ajout enfant -->
                    <form @submit.prevent="addChild()" class="space-y-4">
                        <div class="grid md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-gray-700 text-sm font-bold mb-2">Pr√©nom de l'enfant</label>
                                <input
                                    v-model="childForm.first_name"
                                    type="text"
                                    class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                    placeholder="Pr√©nom"
                                >
                            </div>
                            <div>
                                <label class="block text-gray-700 text-sm font-bold mb-2">Classe</label>
                                <select
                                    v-model="childForm.class_name"
                                    class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    required
                                >
                                    <option value="">Choisir une classe</option>
                                    <optgroup label="Maternelle">
                                        <option value="M1">M1 (1√®re maternelle)</option>
                                        <option value="M2">M2 (2√®me maternelle)</option>
                                        <option value="M3">M3 (3√®me maternelle)</option>
                                    </optgroup>
                                    <optgroup label="Primaire">
                                        <option value="P1">P1 (1√®re primaire)</option>
                                        <option value="P2">P2 (2√®me primaire)</option>
                                        <option value="P3">P3 (3√®me primaire)</option>
                                        <option value="P4">P4 (4√®me primaire)</option>
                                        <option value="P5">P5 (5√®me primaire)</option>
                                        <option value="P6">P6 (6√®me primaire)</option>
                                    </optgroup>
                                </select>
                            </div>
                        </div>
                        <button
                            type="submit"
                            :disabled="isLoading"
                            class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50"
                        >
                            Ajouter l'enfant
                        </button>
                    </form>
                </div>

                <!-- Info Stage 0 -->
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                    <h3 class="text-lg font-semibold text-blue-800 mb-2">üöÄ Stage 0 - Version Minimale</h3>
                    <p class="text-blue-700">
                        Fonctionnalit√©s actuelles : Authentification et gestion des profils.
                        <br>
                        <strong>Prochaine √©tape :</strong> SEL (Syst√®me d'√âchange Local) au Stage 1.
                    </p>
                </div>

                <!-- D√©connexion -->
                <div class="text-center">
                    <button
                        @click="logout()"
                        class="bg-red-500 text-white px-6 py-2 rounded hover:bg-red-600"
                    >
                        Se d√©connecter
                    </button>
                </div>
            </div>
        </main>
    </div>

    <script>
        const { createApp } = Vue;
        
        createApp({
            data() {
                return {
                    // √âtat global
                    isLoading: false,
                    errorMessage: '',
                    successMessage: '',
                    
                    // Auth
                    isLogin: true,
                    isAuthenticated: false,
                    user: null,
                    
                    // Forms
                    formData: {
                        email: '',
                        first_name: '',
                        last_name: '',
                        password: ''
                    },
                    
                    // Profil
                    editingProfile: false,
                    profileEdit: {
                        first_name: '',
                        last_name: ''
                    },
                    
                    // Enfants
                    children: [],
                    childForm: {
                        first_name: '',
                        class_name: ''
                    }
                }
            },
            
            async mounted() {
                // V√©rifier si token en localStorage
                const token = localStorage.getItem('token');
                if (token) {
                    await this.loadUserData(token);
                }
            },
            
            methods: {
                async loadUserData(token) {
                    try {
                        // Charger profil utilisateur
                        const userResponse = await fetch('/me', {
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });
                        
                        if (userResponse.ok) {
                            this.user = await userResponse.json();
                            this.isAuthenticated = true;
                            
                            // Charger enfants
                            await this.loadChildren();
                        } else {
                            localStorage.removeItem('token');
                        }
                    } catch (error) {
                        console.error('Erreur chargement utilisateur:', error);
                        localStorage.removeItem('token');
                    }
                },
                
                async register() {
                    this.isLoading = true;
                    this.errorMessage = '';
                    
                    try {
                        const response = await fetch('/register', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(this.formData)
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            localStorage.setItem('token', data.access_token);
                            
                            // Charger donn√©es utilisateur
                            await this.loadUserData(data.access_token);
                            this.successMessage = 'Inscription r√©ussie ! Bienvenue sur EcoleHub.';
                        } else {
                            const errorData = await response.json();
                            this.errorMessage = errorData.detail || 'Erreur lors de l\'inscription';
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        this.errorMessage = 'Erreur de connexion au serveur';
                    } finally {
                        this.isLoading = false;
                    }
                },
                
                async login() {
                    this.isLoading = true;
                    this.errorMessage = '';
                    
                    try {
                        const formData = new FormData();
                        formData.append('email', this.formData.email);
                        formData.append('password', this.formData.password);
                        
                        const response = await fetch('/login', {
                            method: 'POST',
                            body: formData
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            localStorage.setItem('token', data.access_token);
                            
                            await this.loadUserData(data.access_token);
                            this.successMessage = 'Connexion r√©ussie !';
                        } else {
                            this.errorMessage = 'Email ou mot de passe incorrect';
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        this.errorMessage = 'Erreur de connexion au serveur';
                    } finally {
                        this.isLoading = false;
                    }
                },
                
                async loadChildren() {
                    try {
                        const token = localStorage.getItem('token');
                        const response = await fetch('/children', {
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });
                        
                        if (response.ok) {
                            this.children = await response.json();
                        }
                    } catch (error) {
                        console.error('Erreur chargement enfants:', error);
                    }
                },
                
                async addChild() {
                    this.isLoading = true;
                    this.errorMessage = '';
                    
                    try {
                        const token = localStorage.getItem('token');
                        const response = await fetch('/children', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${token}`
                            },
                            body: JSON.stringify(this.childForm)
                        });
                        
                        if (response.ok) {
                            await this.loadChildren();
                            this.childForm = { first_name: '', class_name: '' };
                            this.successMessage = 'Enfant ajout√© avec succ√®s !';
                        } else {
                            const errorData = await response.json();
                            this.errorMessage = errorData.detail || 'Erreur lors de l\'ajout';
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        this.errorMessage = 'Erreur de connexion au serveur';
                    } finally {
                        this.isLoading = false;
                    }
                },
                
                async deleteChild(childId) {
                    if (!confirm('√ätes-vous s√ªr de vouloir supprimer cet enfant ?')) {
                        return;
                    }
                    
                    this.isLoading = true;
                    
                    try {
                        const token = localStorage.getItem('token');
                        const response = await fetch(`/children/${childId}`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });
                        
                        if (response.ok) {
                            await this.loadChildren();
                            this.successMessage = 'Enfant supprim√©';
                        } else {
                            this.errorMessage = 'Erreur lors de la suppression';
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        this.errorMessage = 'Erreur de connexion au serveur';
                    } finally {
                        this.isLoading = false;
                    }
                },
                
                async updateProfile() {
                    this.isLoading = true;
                    this.errorMessage = '';
                    
                    try {
                        const token = localStorage.getItem('token');
                        const response = await fetch('/me', {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Authorization': `Bearer ${token}`
                            },
                            body: new URLSearchParams({
                                first_name: this.profileEdit.first_name,
                                last_name: this.profileEdit.last_name
                            })
                        });
                        
                        if (response.ok) {
                            this.user = await response.json();
                            this.editingProfile = false;
                            this.successMessage = 'Profil mis √† jour !';
                        } else {
                            this.errorMessage = 'Erreur lors de la mise √† jour';
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        this.errorMessage = 'Erreur de connexion au serveur';
                    } finally {
                        this.isLoading = false;
                    }
                },
                
                toggleForm() {
                    this.isLogin = !this.isLogin;
                    this.formData = { email: '', first_name: '', last_name: '', password: '' };
                    this.errorMessage = '';
                },
                
                cancelEdit() {
                    this.editingProfile = false;
                    this.profileEdit = { first_name: '', last_name: '' };
                },
                
                logout() {
                    localStorage.removeItem('token');
                    this.isAuthenticated = false;
                    this.user = null;
                    this.children = [];
                    this.formData = { email: '', first_name: '', last_name: '', password: '' };
                    this.successMessage = 'D√©connexion r√©ussie';
                }
            }
        }).mount('#app');
    </script>
</body>
</html>