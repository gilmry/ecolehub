services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ecolehub
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ecolehub
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_stage4.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecolehub
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecolehub"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - ecolehub
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    networks:
      - ecolehub  # Réseau interne uniquement
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build:
      context: ./backend
      args:
        STAGE: ${STAGE:-4}
    environment:
      - BIND_HOST=0.0.0.0
      - DATABASE_URL=postgresql://ecolehub:${DB_PASSWORD}@postgres:5432/ecolehub
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - MOLLIE_API_KEY=${MOLLIE_API_KEY}
      - PRINTFUL_API_KEY=${PRINTFUL_API_KEY}
      - PROMETHEUS_ENABLED=${PROMETHEUS_ENABLED:-true}
      - STAGE=${STAGE:-4}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - ./backend/app:/app/app
      - ./data:/app/data
      - ./db:/app/db
      - ./scripts:/app/scripts
      - ./uploads:/app/uploads
      - ./frontend/locales:/app/frontend/locales:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ecolehub
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      # Backend API - toutes les routes API et monitoring
      - "traefik.http.routers.ecolehub-api.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/health`) || PathPrefix(`/metrics`))"
      - "traefik.http.routers.ecolehub-api.priority=200"
      - "traefik.http.routers.ecolehub-api.entrypoints=websecure"
      - "traefik.http.routers.ecolehub-api.tls=true"
      - "traefik.http.routers.ecolehub-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.ecolehub-api.service=ecolehub-api"
      - "traefik.http.services.ecolehub-api.loadbalancer.server.port=8000"
      # WebSocket support
      - "traefik.http.routers.ecolehub-ws.rule=Host(`${DOMAIN}`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.ecolehub-ws.entrypoints=websecure"
      - "traefik.http.routers.ecolehub-ws.tls=true"
      - "traefik.http.routers.ecolehub-ws.tls.certresolver=letsencrypt"
      - "traefik.http.routers.ecolehub-ws.service=ecolehub-api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery:
    build:
      context: ./backend
      args:
        STAGE: ${STAGE:-4}
    command: celery -A app.workers.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://ecolehub:${DB_PASSWORD:-ecolehub_secure_password}@postgres:5432/ecolehub
      - REDIS_URL=redis://:${REDIS_PASSWORD:-ecolehub_redis_cache_password}@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-ecolehub_minio_admin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-ecolehub_minio_secure_password}
      - MOLLIE_API_KEY=${MOLLIE_API_KEY:-test_mollie_demo_key}
      - PRINTFUL_API_KEY=${PRINTFUL_API_KEY:-test_printful_demo_key}
      - STAGE=${STAGE:-4}
    volumes:
      - ./backend/app:/app/app
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - ecolehub

  frontend:
    image: nginx:alpine
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - ecolehub
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      # Frontend principal - capture tout sauf /api, /health, /metrics
      - "traefik.http.routers.ecolehub-frontend.rule=Host(`${DOMAIN}`) && !PathPrefix(`/api`) && !PathPrefix(`/health`) && !PathPrefix(`/metrics`)"
      - "traefik.http.routers.ecolehub-frontend.priority=50"
      - "traefik.http.routers.ecolehub-frontend.entrypoints=websecure"
      - "traefik.http.routers.ecolehub-frontend.tls=true"
      - "traefik.http.routers.ecolehub-frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.ecolehub-frontend.service=ecolehub-frontend"
      - "traefik.http.services.ecolehub-frontend.loadbalancer.server.port=80"
      # Redirection HTTP vers HTTPS
      - "traefik.http.middlewares.ecolehub-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.ecolehub-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.ecolehub-http.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.ecolehub-http.entrypoints=web"
      - "traefik.http.routers.ecolehub-http.middlewares=ecolehub-redirect"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  traefik:
    image: traefik:v3.0
    container_name: ecolehub-traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addentrypointslabels=true"
      - "--metrics.prometheus.addserviceslabels=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      # Dashboard Traefik (accès sécurisé)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      # Authentification basique pour le dashboard
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/ecolehub_rules.yml:/etc/prometheus/ecolehub_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ecolehub  # Réseau interne uniquement
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DEFAULT_TIMEZONE=Europe/Brussels
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ecolehub  # Réseau interne uniquement
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ecolehub:
    driver: bridge
  web:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  traefik_letsencrypt:
