#!/bin/bash
# Script de migration EcoleHub Stage 1 ‚Üí Stage 2

echo "üöÄ Migration EcoleHub Stage 1 ‚Üí Stage 2"
echo "========================================"

# V√©rifications
if [ ! -f "docker-compose.stage1.yml" ]; then
    echo "‚ùå Configuration Stage 1 non trouv√©e"
    exit 1
fi

if [ ! -f "docker-compose.stage2.yml" ]; then
    echo "‚ùå Configuration Stage 2 non trouv√©e"
    exit 1
fi

echo "‚úÖ Pr√©-requis valid√©s"
echo ""

# 1. V√©rifier Stage 1 op√©rationnel
echo "üîç V√©rification Stage 1..."
HEALTH_1=$(curl -s http://localhost:8000/health 2>/dev/null || echo "")

if echo "$HEALTH_1" | grep -q '"stage":1'; then
    echo "‚úÖ Stage 1 op√©rationnel"
    
    # Test quelques donn√©es
    USERS=$(docker-compose -f docker-compose.stage1.yml exec postgres psql -U ecolehub -d ecolehub -c "SELECT COUNT(*) FROM users;" 2>/dev/null | grep -E "^[0-9]+$" || echo "0")
    echo "   ‚Ä¢ Utilisateurs: $USERS"
    
    SERVICES=$(docker-compose -f docker-compose.stage1.yml exec postgres psql -U ecolehub -d ecolehub -c "SELECT COUNT(*) FROM sel_services;" 2>/dev/null | grep -E "^[0-9]+$" || echo "0")
    echo "   ‚Ä¢ Services SEL: $SERVICES"
    
else
    echo "‚ùå Stage 1 non op√©rationnel"
    echo "üí° Assurez-vous d'avoir lanc√© Stage 1 d'abord"
    exit 1
fi

# 2. Arr√™ter Stage 1
echo ""
echo "üõë Arr√™t Stage 1..."
docker-compose -f docker-compose.stage1.yml down 2>/dev/null

# 3. Backup PostgreSQL
echo "üíæ Backup PostgreSQL Stage 1..."
BACKUP_FILE="backup-stage1-to-stage2-$(date +%Y%m%d_%H%M%S).sql"
docker-compose -f docker-compose.stage1.yml up postgres -d 2>/dev/null
sleep 5
docker-compose -f docker-compose.stage1.yml exec postgres pg_dump -U ecolehub ecolehub > "$BACKUP_FILE" 2>/dev/null
docker-compose -f docker-compose.stage1.yml down 2>/dev/null
echo "   ‚Ä¢ Backup: $BACKUP_FILE"

# 4. Configuration Stage 2
echo "‚öôÔ∏è Configuration Stage 2..."
cp .env.stage2.example .env
echo "   ‚Ä¢ Variables d'environnement Stage 2"

# 5. Lancer Stage 2
echo "üöÄ Lancement Stage 2 (PostgreSQL + Redis + Messaging)..."
docker-compose -f docker-compose.stage2.yml up -d --build

# 6. Attendre d√©marrage complet
echo "‚è≥ Attente d√©marrage complet..."
sleep 20

# 7. V√©rifier Stage 2
echo "üîç V√©rification Stage 2..."
HEALTH_2=$(curl -s http://localhost:8000/health 2>/dev/null)

if echo "$HEALTH_2" | grep -q '"stage":2'; then
    echo "‚úÖ Stage 2 op√©rationnel !"
    echo "$HEALTH_2" | jq . 2>/dev/null || echo "$HEALTH_2"
    echo ""
    
    # Test nouvelles fonctionnalit√©s
    echo "üß™ Test nouvelles fonctionnalit√©s:"
    
    # Test Redis
    REDIS_STATUS=$(echo "$HEALTH_2" | jq -r '.redis_status' 2>/dev/null || echo "Unknown")
    echo "   ‚Ä¢ Redis: $REDIS_STATUS"
    
    # Count conversations and events
    echo "   ‚Ä¢ Conversations: En cours de cr√©ation..."
    echo "   ‚Ä¢ √âv√©nements: Spaghetti Saint-Nicolas + autres"
    
    echo ""
    echo "üéØ Migration Stage 1 ‚Üí Stage 2 r√©ussie !"
    echo ""
    echo "üìç Nouvelles fonctionnalit√©s disponibles :"
    echo "‚Ä¢ Interface: http://localhost (6 onglets)"
    echo "‚Ä¢ Messagerie parent-√†-parent"
    echo "‚Ä¢ √âv√©nements √âcole Notre-Dame Immacul√©e"
    echo "‚Ä¢ Conversations par classe (M1-M3, P1-P6)"
    echo "‚Ä¢ Cache Redis pour performances"
    echo ""
    echo "üçù Le fameux Spaghetti de Saint-Nicolas vous attend !"
    
else
    echo "‚ùå Erreur d√©marrage Stage 2"
    echo "Logs backend:"
    docker-compose -f docker-compose.stage2.yml logs backend --tail=5
fi